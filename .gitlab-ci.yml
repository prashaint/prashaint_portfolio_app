# GitLab CI/CD Pipeline for Prashaint Portfolio - Netlify Deployment
# Domain: prashaintmishra.in

stages:
  - test
  - security
  - build
  - deploy-staging
  - deploy-production

variables:
  NODE_VERSION: "18"
  PRODUCTION_DOMAIN: "prashaintmishra.in"
  STAGING_DOMAIN: "staging.prashaintmishra.in"
  SITE_URL: "https://prashaintmishra.in"

# Cache configuration
cache:
  paths:
    - node_modules/
    - .npm/

# Test Stage
test:
  stage: test
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Running tests for prashaintmishra.in deployment..."
    - npm run test --if-present || echo "No tests configured"
    - echo "Running linting..."
    - npx eslint src/ --ext .js,.jsx --max-warnings 0 || echo "ESLint not configured"
    - echo "Checking build compatibility..."
    - npm run build
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 hour
  only:
    - merge_requests
    - main
    - develop

# Security scanning
security_scan:
  stage: security
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Running security audit..."
    - npm audit --audit-level moderate || echo "Security audit completed"
    - echo "Checking for vulnerabilities..."
    - npx audit-ci --moderate || echo "Security check completed"
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

# Build Stage
build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm ci --cache .npm --prefer-offline
  script:
    - echo "Building React application for prashaintmishra.in..."
    - export VITE_SITE_URL=$SITE_URL
    - export VITE_DOMAIN_NAME=$PRODUCTION_DOMAIN
    - npm run build
    - echo "Build completed successfully"
    - ls -la dist/
  artifacts:
    paths:
      - dist/
    expire_in: 1 day
  only:
    - main
    - develop

# Deploy to Netlify Staging
deploy_staging:
  stage: deploy-staging
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  before_script:
    - npm install -g netlify-cli@latest
    - netlify --version
  script:
    - echo "Deploying to Netlify staging..."
    - echo "Site URL will be https://$STAGING_DOMAIN"
    - netlify deploy --dir=dist --site=$NETLIFY_STAGING_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --message="Staging deployment from GitLab CI"
    - echo "Staging deployment completed!"
  environment:
    name: staging
    url: https://$STAGING_DOMAIN
  only:
    - develop
  when: manual

# Deploy to Netlify Production
deploy_production:
  stage: deploy-production
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - build
  before_script:
    - npm install -g netlify-cli@latest
    - netlify --version
  script:
    - echo "Deploying to Netlify production..."
    - echo "Production URL https://$PRODUCTION_DOMAIN"
    - netlify deploy --prod --dir=dist --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --message="Production deployment from GitLab CI"
    - echo "Production deployment completed!"
    - echo "Live site https://$PRODUCTION_DOMAIN"
  environment:
    name: production
    url: https://$PRODUCTION_DOMAIN
  only:
    - main
  when: manual

# Preview deployments for merge requests
deploy_preview:
  stage: deploy-staging
  image: node:${NODE_VERSION}-alpine
  dependencies:
    - test
  before_script:
    - npm install -g netlify-cli@latest
  script:
    - echo "Creating preview deployment..."
    - netlify deploy --dir=dist --site=$NETLIFY_SITE_ID --auth=$NETLIFY_AUTH_TOKEN --alias="mr-$CI_MERGE_REQUEST_IID"
    - echo "Preview deployment created"
  environment:
    name: preview/mr-$CI_MERGE_REQUEST_IID
    url: https://mr-$CI_MERGE_REQUEST_IID--$NETLIFY_SITE_NAME.netlify.app
    on_stop: cleanup_preview
  only:
    - merge_requests
  except:
    - main
    - develop

# Cleanup preview deployments
cleanup_preview:
  stage: deploy-staging
  image: node:${NODE_VERSION}-alpine
  before_script:
    - npm install -g netlify-cli@latest
  script:
    - echo "Cleaning up preview deployment..."
  environment:
    name: preview/mr-$CI_MERGE_REQUEST_IID
    action: stop
  when: manual
  only:
    - merge_requests

# Backup production build
backup_build:
  stage: deploy-production
  image: alpine:latest
  dependencies:
    - build
  before_script:
    - apk add --no-cache tar gzip
  script:
    - echo "Creating backup of production build..."
    - tar -czf "prashaint-portfolio-build-$CI_COMMIT_SHORT_SHA.tar.gz" dist/
    - echo "Build backup created"
    - ls -lh *.tar.gz
  artifacts:
    paths:
      - "prashaint-portfolio-build-*.tar.gz"
    expire_in: 30 days
    name: "build-backup-$CI_COMMIT_SHORT_SHA"
  only:
    - main
  when: on_success

# Cleanup
cleanup:
  stage: deploy-production
  script:
    - echo "Cleaning up temporary files..."
  after_script:
    - rm -rf node_modules/ || true
    - rm -rf dist/ || true
    - echo "Cleanup completed"
  when: always